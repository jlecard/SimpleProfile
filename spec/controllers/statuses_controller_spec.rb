require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe StatusesController do
  after :all do
    clear_data
  end
  describe "Authenticated" do

    before(:each) do
      login_setup
    end

    # This should return the minimal set of attributes required to create a valid
    # Status. As you add validations to Status, be sure to
    # update the return value of this method accordingly.
    def valid_attributes
      {}
    end

    # This should return the minimal set of values that should be in the session
    # in order to pass any filters (e.g. authentication) defined in
    # StatusesController. Be sure to keep this updated too.
    def valid_session
     
    end

    describe "GET index" do
      it "assigns all statuses as @statuses" do
        get :index, {}, valid_session
        assigns(:statuses).should eq(@profile.statuses)
      end
    end

    describe "GET show" do
      it "assigns the requested status as @status" do
        status = Status.create! valid_attributes
        lambda { get :show, {:id => status.to_param}, valid_session }.should raise_error ActionView::MissingTemplate
      end
    end

    describe "GET new" do
      it "assigns a new status as @status" do
        get :new, {}, valid_session
        assigns(:status).should be_a_new(Status)
      end
    end

    describe "GET edit" do
      it "assigns the requested status as @status" do
        status = Status.create! valid_attributes
        set_http_referer
        get :edit, {:id => status.to_param}, valid_session
        response.should redirect_to :back
        flash[:notice].should =~ /Impossible/i
      end
    end

    describe "POST create" do
      describe "with valid params" do
        it "creates a new Status" do
          expect {
            set_http_referer
            post :create, {:status => @profile.statuses.last.attributes}, valid_session
          }.to change(Status, :count).by(1)
        end

        it "assigns a newly created status as @status" do
          set_http_referer
          post :create, {:status => valid_attributes}, valid_session
          assigns(:status).should be_a(Status)
          assigns(:status).should be_persisted
        end

        it "redirects to the back page" do
          set_http_referer
          post :create, {:status => valid_attributes}, valid_session
          response.should redirect_to(:back)
        end
      end

      describe "with invalid params" do
        it "assigns a newly created but unsaved status as @status" do
        # Trigger the behavior that occurs when invalid params are submitted
          Status.any_instance.stub(:save).and_return(false)
          lambda {
            post :create, {:status => {}}, valid_session}.should raise_error ActionView::MissingTemplate
        end

        it "re-renders the 'new' template" do
        # Trigger the behavior that occurs when invalid params are submitted
          Status.any_instance.stub(:save).and_return(false)
          lambda {
            post :create, {:status => {}}, valid_session}.should raise_error ActionView::MissingTemplate
        end
      end
    end

    describe "PUT update" do
      describe "with valid params" do
        it "updates the requested status" do
          status = Status.create! valid_attributes
          # Assuming there are no other statuses in the database, this
          # specifies that the Status created on the previous line
          # receives the :update_attributes message with whatever params are
          # submitted in the request.
          Status.any_instance.should_receive(:update_attributes).with({'these' => 'params'})
          lambda {
            put :update, {:id => status.to_param, :status => {'these' => 'params'}},
                         valid_session}.should raise_error ActionView::MissingTemplate
          
        end

        it "assigns the requested status as @status" do
          status = Status.create! valid_attributes
          lambda { put :update, {:id => status.to_param, :status => valid_attributes}, valid_session}.should
                raise_error ActionView::MissingTemplate
        end

        it "redirects to the status" do
          status = Status.create! valid_attributes
          lambda { put :update, {:id => status.to_param, :status => valid_attributes}, valid_session}.should
                raise_error ActionView::MissingTemplate
        end
      end

      describe "with invalid params" do
        it "assigns the status as @status" do
          status = Status.create! valid_attributes
          # Trigger the behavior that occurs when invalid params are submitted
          Status.any_instance.stub(:save).and_return(false)
          lambda {put :update, {:id => status.to_param, :status => {}}, valid_session}.should
              raise_error ActionView::MissingTemplate
        end

        it "re-renders the 'edit' template" do
          status = Status.create! valid_attributes
          # Trigger the behavior that occurs when invalid params are submitted
          Status.any_instance.stub(:save).and_return(false)
          lambda {put :update, {:id => status.to_param, :status => {}}, valid_session}.should
              raise_error ActionView::MissingTemplate
        end
      end
    end

    describe "DELETE destroy" do
      it "destroys the requested status" do
        status = Status.create! valid_attributes
        expect {
          delete :destroy, {:id => status.to_param}, valid_session
        }.to change(Status, :count).by(-1)
      end

      it "redirects to the statuses list" do
        status = Status.create! valid_attributes
        delete :destroy, {:id => status.to_param}, valid_session
        response.should redirect_to(statuses_url)
      end
    end
  end
end
